---
title: "PS4: Spatial"
author: "Hiroaki Kurachi, Luis Senires"
date: today
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 
We use (`*`) to indicate a problem that we think might be time consuming. 

## Style Points (10 pts)

## Submission Steps (10 pts)

1. This problem set is a paired problem set.

2. Play paper, scissors, rock to determine who goes first. Call that person Partner 1.

  • Partner 1 (Hiroaki Kurachi and hiroakik):

  • Partner 2 (Luis Senires and ldsenires):

3. Partner 1 will accept the ps4 and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted.

4. “This submission is our work alone and complies with the 30538 integrity policy.” Add your initials to indicate your agreement: **HK** **__**

5. “I have uploaded the names of anyone else other than my partner and I worked with on the problem set here” (1 point)

6. Late coins used this pset: **__** Late coins left after submission: **__**

7. Knit your ps4.qmd to an PDF file to make ps4.pdf,

  • The PDF should not be more than 25 pages. Use head() and re-size figures when appropriate.

8. (Partner 1): push ps4.qmd and ps4.pdf to your github repo.

9. (Partner 1): submit ps4.pdf via Gradescope. Add your partner on Gradescope.

10. (Partner 1): tag your submission in Gradescope

**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers.

```{python}
import os
import pandas as pd
import altair as alt
import geopandas as gpd
import matplotlib.pyplot as plt

import warnings 
warnings.filterwarnings('ignore')
```

## Download and explore the Provider of Services (POS) file (10 pts)

1. 

The variables we selected are;

- PRVDR_NUM: CMS certification number

- PRVDR_CTGRY_CD: the type of provider participating in the Medicare/Medicaid program

- PRVDR_CTGRY_SBTYP_CD: the subtype of the provider, within the primary category

- FAC_NAME: name of the provider certified to participate in the Medicare and/or Medicaid programs

- CITY_NAME: city in which the provider is physically located

- ST_ADR: street address where the provider is located

- ZIP_CD; five-digit ZIP code for a provider's physical address

- TRMNTN_EXPRTN_DT: date the provider was terminated

2. 

```{python}
# Set the absolute path of the data folder
base = (r"C:\Users\hkura\Documents\Uchicago\04 2024 Autumn\Python2\problem-set-4-hiro-luis\data")
path_data_2016 = os.path.join(base,"pos2016.csv")

# Load 2016 dataset
df_pos2016 = pd.read_csv(path_data_2016, encoding = "utf-8")

# Define function to subset a dataset for short-term hospitals
def subset_short_term(df):
    df_result = df[(df["PRVDR_CTGRY_CD"] == 1)&(df["PRVDR_CTGRY_SBTYP_CD"] == 1)]
    return df_result

# Create short-term hospitals subsets for 2016 dataset
df_pos2016_short = subset_short_term(df_pos2016)
```

    a.    
```{python}
# Count the number of observations
print(len(df_pos2016_short))
```

    This subset for short-term hospitals in 2016 includes 7245 hospitals.

    DOES THIS NUMBER MAKE SENSE?

    b. We couldn't find references which includes the exact number of short-term hospitals at the end of 2016, but the 2016 CMS statistics specifies the number as 3,436 for the Dec 31, 2015, which is the most recent data available in the search result(https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/CMS-Statistics-Reference-Booklet/Downloads/2016_CMS_Stats.pdf).

    Considering the number 3,436 at the end of 2015, 7245 is drastically larger, even considering the change in one year.

    As far as we could find, there seems no substantial policy change in 2016, which could potentially change the number of healthcare providers drastically.

    As both the dataset we use and the cross-reference are both published by Centers for Medicare & Medicaid Services, it might be plausible to assume their credibilities. And as the dataset dictionary says nothing about change in definition of the provider categories/sub-categories. Then one reason we can consider is, for instance, the change in the data gathering methods. 

3. 

```{python}
# Load 2017-2019 datasets
path_data_2017 = os.path.join(base,"pos2017.csv")
path_data_2018 = os.path.join(base,"pos2018.csv")
path_data_2019 = os.path.join(base,"pos2019.csv")
df_pos2017 = pd.read_csv(path_data_2017, encoding = "utf-8")
df_pos2018 = pd.read_csv(path_data_2018, encoding = "latin1")
df_pos2019 = pd.read_csv(path_data_2019, encoding = "latin1")

# Clean 2018, 2019 datasets: fix colname
def fix_col(df):
  col = df.columns.tolist()
  col[0] = "PRVDR_NUM"
  df.columns = col
  return df
df_pos2018 = fix_col(df_pos2018)
df_pos2019 = fix_col(df_pos2019)

# Create short-term hospitals subsets for 2017-2019 datasets
df_pos2017_short = subset_short_term(df_pos2017)
df_pos2018_short = subset_short_term(df_pos2018)
df_pos2019_short = subset_short_term(df_pos2019)

# Summarize the number of observations for each subset
df_summary_obs = pd.DataFrame(
  {"year": list(range(2016, 2020, 1)), 
  "observations" : [len(df_pos2016_short), len(df_pos2017_short), len(df_pos2018_short), len(df_pos2019_short)]
  }
)

df_summary_obs
```

  The number for q4 in 2017/2018/2019 is on similar level with 2016, which are unmatched with the cross-reference.

```{python}
# Add "DATA_YEAR" column to each subsets
df_pos2016_short["DATA_YEAR"] = 2016
df_pos2017_short["DATA_YEAR"] = 2017
df_pos2018_short["DATA_YEAR"] = 2018
df_pos2019_short["DATA_YEAR"] = 2019

# Concaterate the subsets
df_pos = pd.concat([df_pos2016_short, df_pos2017_short, df_pos2018_short, df_pos2019_short])

# Turn off the row number limit
alt.data_transformers.disable_max_rows()

# Plot the number of observation for each subset's year
chart_obs = alt.Chart(df_pos).mark_line().encode(
    alt.X("DATA_YEAR:N", title = "Year (Q4)", axis = alt.Axis(labelAngle = 0)),
    alt.Y("count()", title = "Number of Observation", scale = alt.Scale(domain = [7000,8000]))
).properties(width = 250, height = 250)
chart_obs
```

4. 
    a.

```{python}
# Summarize the number of unique providers for each subset
df_summary_unique = pd.DataFrame(
  {"year": list(range(2016, 2020, 1)), 
  "unique_hospitals" :  [len(df_pos2016_short["PRVDR_NUM"].value_counts()), len(df_pos2017_short["PRVDR_NUM"].value_counts()), len(df_pos2018_short["PRVDR_NUM"].value_counts()), len(df_pos2019_short["PRVDR_NUM"].value_counts())]
  }
)

df_summary_unique

# Plot the number of unique hospitals for each subset's year
chart_unique = alt.Chart(df_summary_unique).mark_line().encode(
    alt.X("year:N", title = "Year (Q4)", axis = alt.Axis(labelAngle = 0)),
    alt.Y("unique_hospitals:Q", title = "Number of unique hospitals", scale = alt.Scale(domain = [7000,8000]))
).properties(width = 250, height = 250)
chart_unique
```

    b.
    The numbers of unique hospitals are the same as the numbers of observations for all years we examined. This suggests that this dataset is structured so that each row contains parameters/attributions of each hospital.

## Identify hospital closures in POS file (15 pts) (*)

1. 
2. 
3. 
    a.
    b.
    c.

## Download Census zip code shapefile (10 pt) 

1. 
    a. The file types and the   types of information for each of those included in the data is below;

      - .shp : feature geometrics

      - .shx : positional index

      - .dbf : attribute information

      - .prj : description about the CRS

      - .xml : metadata for the data
      
    b. 

```{python}
# Define a function to get the file size
def get_filesize(path):
    size = os.path.getsize(path)
    if size > (1024 ** 2):
        size = size / (1024 ** 2)
        result = f"{round(size,1)}MB"
    elif size > 1024:
        size = size / 1024
        result = f"{round(size,1)}KB"
    else:
        result = f"{round(size,1)}bytes"
    return result

# Get the file sizes for each file
shape_filetypes = ["shp", "shx", "dbf", "prj", "xml"]

paths_shape = [os.path.join(base, "gz_2010_us_860_00_500k", f"gz_2010_us_860_00_500k.{x}") for x in shape_filetypes]

shape_filesizes = pd.DataFrame(
  {"file": [f"gz_2010_us_860_00_500k.{x}" for x in shape_filetypes],
  "size":[get_filesize(x) for x in paths_shape]
  }
)

print(shape_filesizes)
```

2. 

```{python}
#| eval: false
# Load the shp file
path_shp = os.path.join(base, r"gz_2010_us_860_00_500k\gz_2010_us_860_00_500k.shp")
df_shp = gpd.read_file(path_shp)
```

```{python}
df_shp["ZCTA5"] = df_shp["ZCTA5"].astype(int)
df_shp.head
```

From the metadata in the XML file, we can restrict the zip code by filtering the column "ZCTA5". Now given that Texas zip codes start from 75-79, we can operate the restriction as below;

```{python}
# Restrict to Texas ZIP codes
df_shp_tx = df_shp[(df_shp["ZCTA5"].astype(int) >= 75000) & (df_shp["ZCTA5"].astype(int) < 80000)]

# Extract Texas ZIP codes
zip_tx = df_shp_tx["ZCTA5"].value_counts().index.astype(int).to_list()

# Summarize the number of hospitals per zip code on 2016 subset of POS data
df_pos2016_short_tx = df_pos2016_short[df_pos2016_short["ZIP_CD"].isin(zip_tx)]
summary_pos2016_short_tx = df_pos2016_short_tx.groupby("ZIP_CD").size().reset_index()
summary_pos2016_short_tx.columns = ["ZIP code", "Number of hospitals"]
summary_pos2016_short_tx["ZIP code"] =summary_pos2016_short_tx["ZIP code"].astype(int)

summary_pos2016_short_tx
```

```{python}
# Merge the dataframes
df_shp_tx = df_shp_tx.merge(
    summary_pos2016_short_tx,
    left_on = "ZCTA5",
    right_on = "ZIP code",
    how = "outer"
)

# Plot the number of hospital in TX on the map
df_shp_tx.plot(column = "Number of hospitals", legend = "True")
plt.axis("off")
plt.show
```

## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. 
2. 
3. 
4. 
    a.
    b.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 
